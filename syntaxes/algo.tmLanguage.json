{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Codeboxx Pseudocode",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "storage.type.algo",
          "match": "(?i:\\b(SEQUENCE|USING|RETURN|END SEQUENCE)\\b)"
        },
        {
          "name": "keyword.control.algo",
          "match": "(?i:\\b(SET|TO)\\b)"
        },
        {
          "match": "(?i:\\b(IF|THEN|ELSE|ELSE IF|END IF|WHILE|FOR|TO|EACH|END FOR|RETURN|CONTINUE|Do|Until|Loop|Next|With|Exit Do|Exit For|Exit Function|Exit Property|Exit Sub|IIf)\\b)",
          "name": "keyword.control.algo"
        },
        {
          "name": "keyword.control.algo",
          "match": "(?i:\\b(READ|FROM)\\b)"
        },
        {
          "name": "keyword.control.algo",
          "match": "(?i:\\b(CALL|WITH|RETURNING)\\b)"
        },
        {
          "name": "keyword.control.algo",
          "match": "(?i:\\b(ADD|COMPUTE|DETERMINE)\\b)"
        },
        {
          "name": "keyword.operator.comparison.algo",
          "match": "<=>|<=|>=|<|>|IS|IS NOT|EQUAL"
        },
        {
          "match": "(?i:\\s*\\b(EMPTY|FALSE|NOTHING|NULL|TRUE)\\b)",
          "name": "constant.language.algo"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.function.algo"
            }
          },
          "match": "(?i:(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b)(?=\\(\\)?))",
          "name": "support.function.algo"
        },
        {
          "begin": "(^[ \\t]+)?(?=')",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.algo"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.algo"
                }
              },
              "end": "\\n",
              "name": "comment.line.apostrophe.algo"
            }
          ]
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.algo",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.algo",
          "match": "\\\\."
        }
      ]
    }
  },
  "scopeName": "source.algo"
}
